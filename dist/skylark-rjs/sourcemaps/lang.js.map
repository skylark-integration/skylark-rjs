{"version":3,"sources":["lang.js"],"names":["define","lang","isJavaObj","hasOwn","Object","prototype","hasOwnProperty","hasProp","obj","prop","call","java","importPackage","backSlashRegExp","ostring","toString","isArray","Array","it","isFunction","isRegExp","RegExp","falseProp","getOwn","_mixin","dest","source","override","name","mixin","i","l","parameters","slice","arguments","length","pop","deepMix","eachProp","value","deeplikeCopy","ignoredProps","type","result","forEach","push","undefined","key","delegate","TMP","props","tmp","each","ary","func","bind","fn","apply","jsEscape","content","replace"],"mappings":"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","file":"../lang.js","sourcesContent":["/*jslint plusplus: true */\n/*global define, java */\n\ndefine(function () {\n    'use strict';\n\n    var lang, isJavaObj,\n        hasOwn = Object.prototype.hasOwnProperty;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    isJavaObj = function () {\n        return false;\n    };\n\n    //Rhino, but not Nashorn (detected by importPackage not existing)\n    //Can have some strange foreign objects.\n    if (typeof java !== 'undefined' && java.lang && java.lang.Object && typeof importPackage !== 'undefined') {\n        isJavaObj = function (obj) {\n            return obj instanceof java.lang.Object;\n        };\n    }\n\n    lang = {\n        backSlashRegExp: /\\\\/g,\n        ostring: Object.prototype.toString,\n\n        isArray: Array.isArray || function (it) {\n            return lang.ostring.call(it) === \"[object Array]\";\n        },\n\n        isFunction: function(it) {\n            return lang.ostring.call(it) === \"[object Function]\";\n        },\n\n        isRegExp: function(it) {\n            return it && it instanceof RegExp;\n        },\n\n        hasProp: hasProp,\n\n        //returns true if the object does not have an own property prop,\n        //or if it does, it is a falsy value.\n        falseProp: function (obj, prop) {\n            return !hasProp(obj, prop) || !obj[prop];\n        },\n\n        //gets own property value for given prop on object\n        getOwn: function (obj, prop) {\n            return hasProp(obj, prop) && obj[prop];\n        },\n\n        _mixin: function(dest, source, override){\n            var name;\n            for (name in source) {\n                if(source.hasOwnProperty(name) &&\n                    (override || !dest.hasOwnProperty(name))) {\n                    dest[name] = source[name];\n                }\n            }\n\n            return dest; // Object\n        },\n\n        /**\n         * mixin({}, obj1, obj2) is allowed. If the last argument is a boolean,\n         * then the source objects properties are force copied over to dest.\n         */\n        mixin: function(dest){\n            var parameters = Array.prototype.slice.call(arguments),\n                override, i, l;\n\n            if (!dest) { dest = {}; }\n\n            if (parameters.length > 2 && typeof arguments[parameters.length-1] === 'boolean') {\n                override = parameters.pop();\n            }\n\n            for (i = 1, l = parameters.length; i < l; i++) {\n                lang._mixin(dest, parameters[i], override);\n            }\n            return dest; // Object\n        },\n\n        /**\n         * Does a deep mix of source into dest, where source values override\n         * dest values if a winner is needed.\n         * @param  {Object} dest destination object that receives the mixed\n         * values.\n         * @param  {Object} source source object contributing properties to mix\n         * in.\n         * @return {[Object]} returns dest object with the modification.\n         */\n        deepMix: function(dest, source) {\n            lang.eachProp(source, function (value, prop) {\n                if (typeof value === 'object' && value &&\n                    !lang.isArray(value) && !lang.isFunction(value) &&\n                    !(value instanceof RegExp)) {\n\n                    if (!dest[prop]) {\n                        dest[prop] = {};\n                    }\n                    lang.deepMix(dest[prop], value);\n                } else {\n                    dest[prop] = value;\n                }\n            });\n            return dest;\n        },\n\n        /**\n         * Does a type of deep copy. Do not give it anything fancy, best\n         * for basic object copies of objects that also work well as\n         * JSON-serialized things, or has properties pointing to functions.\n         * For non-array/object values, just returns the same object.\n         * @param  {Object} obj      copy properties from this object\n         * @param  {Object} [ignoredProps] optional object whose own properties\n         * are keys that should be ignored.\n         * @return {Object}\n         */\n        deeplikeCopy: function (obj, ignoredProps) {\n            var type, result;\n\n            if (lang.isArray(obj)) {\n                result = [];\n                obj.forEach(function(value) {\n                    result.push(lang.deeplikeCopy(value, ignoredProps));\n                });\n                return result;\n            }\n\n            type = typeof obj;\n            if (obj === null || obj === undefined || type === 'boolean' ||\n                type === 'string' || type === 'number' || lang.isFunction(obj) ||\n                lang.isRegExp(obj)|| isJavaObj(obj)) {\n                return obj;\n            }\n\n            //Anything else is an object, hopefully.\n            result = {};\n            lang.eachProp(obj, function(value, key) {\n                if (!ignoredProps || !hasProp(ignoredProps, key)) {\n                    result[key] = lang.deeplikeCopy(value, ignoredProps);\n                }\n            });\n            return result;\n        },\n\n        delegate: (function () {\n            // boodman/crockford delegation w/ cornford optimization\n            function TMP() {}\n            return function (obj, props) {\n                TMP.prototype = obj;\n                var tmp = new TMP();\n                TMP.prototype = null;\n                if (props) {\n                    lang.mixin(tmp, props);\n                }\n                return tmp; // Object\n            };\n        }()),\n\n        /**\n         * Helper function for iterating over an array. If the func returns\n         * a true value, it will break out of the loop.\n         */\n        each: function each(ary, func) {\n            if (ary) {\n                var i;\n                for (i = 0; i < ary.length; i += 1) {\n                    if (func(ary[i], i, ary)) {\n                        break;\n                    }\n                }\n            }\n        },\n\n        /**\n         * Cycles over properties in an object and calls a function for each\n         * property value. If the function returns a truthy value, then the\n         * iteration is stopped.\n         */\n        eachProp: function eachProp(obj, func) {\n            var prop;\n            for (prop in obj) {\n                if (hasProp(obj, prop)) {\n                    if (func(obj[prop], prop)) {\n                        break;\n                    }\n                }\n            }\n        },\n\n        //Similar to Function.prototype.bind, but the \"this\" object is specified\n        //first, since it is easier to read/figure out what \"this\" will be.\n        bind: function bind(obj, fn) {\n            return function () {\n                return fn.apply(obj, arguments);\n            };\n        },\n\n        //Escapes a content string to be be a string that has characters escaped\n        //for inclusion as part of a JS string.\n        jsEscape: function (content) {\n            return content.replace(/([\"'\\\\])/g, '\\\\$1')\n                .replace(/[\\f]/g, \"\\\\f\")\n                .replace(/[\\b]/g, \"\\\\b\")\n                .replace(/[\\n]/g, \"\\\\n\")\n                .replace(/[\\t]/g, \"\\\\t\")\n                .replace(/[\\r]/g, \"\\\\r\");\n        }\n    };\n    return lang;\n});\n"]}