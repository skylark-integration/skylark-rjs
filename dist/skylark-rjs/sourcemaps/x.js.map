{"version":3,"sources":["x.js"],"names":["requirejs","require","define","xpcUtil","console","args","readFileFunc","fileName","env","fs","vm","path","exec","rhinoContext","dir","nodeRequire","nodeDefine","exists","reqMain","loadedOptimizedLib","existsForNode","Cc","Ci","version","jsSuffixRegExp","commandOption","useLibLoaded","rhinoArgs","xpconnectArgs","readFile","showHelp","log","loadLib","setBaseUrl","replace","indexOf","split","pop","join","createRjsApi","optimize","config","callback","errback","context","build","logger","quit","done","result","_buildReset","_cacheReset","Error","logLevel","hasOwnProperty","SILENT","err","then","tools","useLib","contextName","req","process","versions","node","existsSync","main","undefined","readFileSync","string","name","runInThisContext","this","requirejsVars","makeNodeWrapper","realpathSync","argv","substring","Packages","importPackage","org","mozilla","javascript","ContextFactory","getGlobal","enterContext","evaluateString","load","script","readFully","java","io","File","print","apply","arguments","navigator","document","importScripts","self","eval","Components","classes","interfaces","utils","isWindows","cwd","FileUtils","getFile","normalize","i","part","ary","firstChar","charAt","length","splice","xpfile","fullPath","e","encoding","inStream","convertStream","readData","fileObj","createInstance","nsIFileInputStream","init","nsIConverterInputStream","available","DEFAULT_REPLACEMENT_CHARACTER","readString","value","close","test","module","resolve","filename","exports","location","href","requirejsAsLib","commonJs","srcDir","outDir","convertDir","window","Array","prototype","slice","call"],"mappings":"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","file":"../x.js","sourcesContent":["/**\n * @license r.js 2.3.6 Copyright jQuery Foundation and other contributors.\n * Released under MIT license, http://github.com/requirejs/r.js/LICENSE\n */\n\n/*\n * This is a bootstrap script to allow running RequireJS in the command line\n * in either a Java/Rhino or Node environment. It is modified by the top-level\n * dist.js file to inject other files to completely enable this file. It is\n * the shell of the r.js file.\n */\n\n/*jslint evil: true, nomen: true, sloppy: true */\n/*global readFile: true, process: false, Packages: false, print: false,\nconsole: false, java: false, module: false, requirejsVars, navigator,\ndocument, importScripts, self, location, Components, FileUtils */\n\nvar requirejs, require, define, xpcUtil;\n(function (console, args, readFileFunc) {\n    var fileName, env, fs, vm, path, exec, rhinoContext, dir, nodeRequire,\n        nodeDefine, exists, reqMain, loadedOptimizedLib, existsForNode, Cc, Ci,\n        version = '2.3.6',\n        jsSuffixRegExp = /\\.js$/,\n        commandOption = '',\n        useLibLoaded = {},\n        //Used by jslib/rhino/args.js\n        rhinoArgs = args,\n        //Used by jslib/xpconnect/args.js\n        xpconnectArgs = args,\n        readFile = typeof readFileFunc !== 'undefined' ? readFileFunc : null;\n\n    function showHelp() {\n        console.log('See https://github.com/requirejs/r.js for usage.');\n    }\n\n    if (typeof process !== 'undefined' && process.versions && !!process.versions.node) {\n        env = 'node';\n\n        //Get the fs module via Node's require before it\n        //gets replaced. Used in require/node.js\n        fs = require('fs');\n        vm = require('vm');\n        path = require('path');\n        //In Node 0.7+ existsSync is on fs.\n        existsForNode = fs.existsSync || path.existsSync;\n\n        nodeRequire = require;\n        nodeDefine = define;\n        reqMain = require.main;\n\n        //Temporarily hide require and define to allow require.js to define\n        //them.\n        require = undefined;\n        define = undefined;\n\n        readFile = function (path) {\n            return fs.readFileSync(path, 'utf8');\n        };\n\n        exec = function (string, name) {\n            return vm.runInThisContext(this.requirejsVars.require.makeNodeWrapper(string),\n                                       name ? fs.realpathSync(name) : '');\n        };\n\n        exists = function (fileName) {\n            return existsForNode(fileName);\n        };\n\n\n        fileName = process.argv[2];\n\n        if (fileName && fileName.indexOf('-') === 0) {\n            commandOption = fileName.substring(1);\n            fileName = process.argv[3];\n        }\n    } else if (typeof Packages !== 'undefined') {\n        env = 'rhino';\n\n        fileName = args[0];\n\n        if (fileName && fileName.indexOf('-') === 0) {\n            commandOption = fileName.substring(1);\n            fileName = args[1];\n        }\n\n        //Exec/readFile differs between Rhino and Nashorn. Rhino has an\n        //importPackage where Nashorn does not, so branch on that. This is a\n        //coarser check -- detecting readFile existence might also be enough for\n        //this spot. However, sticking with importPackage to keep it the same\n        //as other Rhino/Nashorn detection branches.\n        if (typeof importPackage !== 'undefined') {\n            rhinoContext = Packages.org.mozilla.javascript.ContextFactory.getGlobal().enterContext();\n\n            exec = function (string, name) {\n                return rhinoContext.evaluateString(this, string, name, 0, null);\n            };\n        } else {\n            exec = function (string, name) {\n                load({ script: string, name: name});\n            };\n            readFile = readFully;\n        }\n\n        exists = function (fileName) {\n            return (new java.io.File(fileName)).exists();\n        };\n\n        //Define a console.log for easier logging. Don't\n        //get fancy though.\n        if (typeof console === 'undefined') {\n            console = {\n                log: function () {\n                    print.apply(undefined, arguments);\n                }\n            };\n        }\n    } else if ((typeof navigator !== 'undefined' && typeof document !== 'undefined') ||\n            (typeof importScripts !== 'undefined' && typeof self !== 'undefined')) {\n        env = 'browser';\n\n        readFile = function (path) {\n            return fs.readFileSync(path, 'utf8');\n        };\n\n        exec = function (string) {\n            return eval(string);\n        };\n\n        exists = function () {\n            console.log('x.js exists not applicable in browser env');\n            return false;\n        };\n\n    } else if (typeof Components !== 'undefined' && Components.classes && Components.interfaces) {\n        env = 'xpconnect';\n\n        Components.utils['import']('resource://gre/modules/FileUtils.jsm');\n        Cc = Components.classes;\n        Ci = Components.interfaces;\n\n        fileName = args[0];\n\n        if (fileName && fileName.indexOf('-') === 0) {\n            commandOption = fileName.substring(1);\n            fileName = args[1];\n        }\n\n        xpcUtil = {\n            isWindows: ('@mozilla.org/windows-registry-key;1' in Cc),\n            cwd: function () {\n                return FileUtils.getFile(\"CurWorkD\", []).path;\n            },\n\n            //Remove . and .. from paths, normalize on front slashes\n            normalize: function (path) {\n                //There has to be an easier way to do this.\n                var i, part, ary,\n                    firstChar = path.charAt(0);\n\n                if (firstChar !== '/' &&\n                        firstChar !== '\\\\' &&\n                        path.indexOf(':') === -1) {\n                    //A relative path. Use the current working directory.\n                    path = xpcUtil.cwd() + '/' + path;\n                }\n\n                ary = path.replace(/\\\\/g, '/').split('/');\n\n                for (i = 0; i < ary.length; i += 1) {\n                    part = ary[i];\n                    if (part === '.') {\n                        ary.splice(i, 1);\n                        i -= 1;\n                    } else if (part === '..') {\n                        ary.splice(i - 1, 2);\n                        i -= 2;\n                    }\n                }\n                return ary.join('/');\n            },\n\n            xpfile: function (path) {\n                var fullPath;\n                try {\n                    fullPath = xpcUtil.normalize(path);\n                    if (xpcUtil.isWindows) {\n                        fullPath = fullPath.replace(/\\//g, '\\\\');\n                    }\n                    return new FileUtils.File(fullPath);\n                } catch (e) {\n                    throw new Error((fullPath || path) + ' failed: ' + e);\n                }\n            },\n\n            readFile: function (/*String*/path, /*String?*/encoding) {\n                //A file read function that can deal with BOMs\n                encoding = encoding || \"utf-8\";\n\n                var inStream, convertStream,\n                    readData = {},\n                    fileObj = xpcUtil.xpfile(path);\n\n                //XPCOM, you so crazy\n                try {\n                    inStream = Cc['@mozilla.org/network/file-input-stream;1']\n                               .createInstance(Ci.nsIFileInputStream);\n                    inStream.init(fileObj, 1, 0, false);\n\n                    convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']\n                                    .createInstance(Ci.nsIConverterInputStream);\n                    convertStream.init(inStream, encoding, inStream.available(),\n                    Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);\n\n                    convertStream.readString(inStream.available(), readData);\n                    return readData.value;\n                } catch (e) {\n                    throw new Error((fileObj && fileObj.path || '') + ': ' + e);\n                } finally {\n                    if (convertStream) {\n                        convertStream.close();\n                    }\n                    if (inStream) {\n                        inStream.close();\n                    }\n                }\n            }\n        };\n\n        readFile = xpcUtil.readFile;\n\n        exec = function (string) {\n            return eval(string);\n        };\n\n        exists = function (fileName) {\n            return xpcUtil.xpfile(fileName).exists();\n        };\n\n        //Define a console.log for easier logging. Don't\n        //get fancy though.\n        if (typeof console === 'undefined') {\n            console = {\n                log: function () {\n                    print.apply(undefined, arguments);\n                }\n            };\n        }\n    }\n\n    //INSERT require.js\n\n\n    this.requirejsVars = {\n        require: require,\n        requirejs: require,\n        define: define\n    };\n\n    if (env === 'browser') {\n        //INSERT src/browser.js\n    } else if (env === 'rhino') {\n        //INSERT src/rhino.js\n    } else if (env === 'node') {\n        this.requirejsVars.nodeRequire = nodeRequire;\n        require.nodeRequire = nodeRequire;\n\n        //INSERT src/node.js\n\n    } else if (env === 'xpconnect') {\n        //INSERT src/xpconnect.js\n    }\n\n    //Support a default file name to execute. Useful for hosted envs\n    //like Joyent where it defaults to a server.js as the only executed\n    //script. But only do it if this is not an optimization run.\n    if (commandOption !== 'o' && (!fileName || !jsSuffixRegExp.test(fileName))) {\n        fileName = 'main.js';\n    }\n\n    /**\n     * Loads the library files that can be used for the optimizer, or for other\n     * tasks.\n     */\n    function loadLib() {\n        //INSERT LIB\n    }\n\n\n    /**\n     * Sets the default baseUrl for requirejs to be directory of top level\n     * script.\n     */\n    function setBaseUrl(fileName) {\n        //Use the file name's directory as the baseUrl if available.\n        dir = fileName.replace(/\\\\/g, '/');\n        if (dir.indexOf('/') !== -1) {\n            dir = dir.split('/');\n            dir.pop();\n            dir = dir.join('/');\n            //Make sure dir is JS-escaped, since it will be part of a JS string.\n            exec(\"require({baseUrl: '\" + dir.replace(/[\\\\\"']/g, '\\\\$&') + \"'});\");\n        }\n    }\n\n    function createRjsApi() {\n        //Create a method that will run the optimzer given an object\n        //config.\n        requirejs.optimize = function (config, callback, errback) {\n            if (!loadedOptimizedLib) {\n                loadLib();\n                loadedOptimizedLib = true;\n            }\n\n            //Create the function that will be called once build modules\n            //have been loaded.\n            var runBuild = function (build, logger, quit) {\n                //Make sure config has a log level, and if not,\n                //make it \"silent\" by default.\n                config.logLevel = config.hasOwnProperty('logLevel') ?\n                                  config.logLevel : logger.SILENT;\n\n                //Reset build internals first in case this is part\n                //of a long-running server process that could have\n                //exceptioned out in a bad state. It is only defined\n                //after the first call though.\n                if (requirejs._buildReset) {\n                    requirejs._buildReset();\n                    requirejs._cacheReset();\n                }\n\n                function done(result) {\n                    //And clean up, in case something else triggers\n                    //a build in another pathway.\n                    if (requirejs._buildReset) {\n                        requirejs._buildReset();\n                        requirejs._cacheReset();\n                    }\n\n                    // Ensure errors get propagated to the errback\n                    if (result instanceof Error) {\n                      throw result;\n                    }\n\n                    return result;\n                }\n\n                errback = errback || function (err) {\n                    // Using console here since logger may have\n                    // turned off error logging. Since quit is\n                    // called want to be sure a message is printed.\n                    console.log(err);\n                    quit(1);\n                };\n\n                build(config).then(done, done).then(callback, errback);\n            };\n\n            requirejs({\n                context: 'build'\n            }, ['build', 'logger', 'env!env/quit'], runBuild);\n        };\n\n        requirejs.tools = {\n            useLib: function (contextName, callback) {\n                if (!callback) {\n                    callback = contextName;\n                    contextName = 'uselib';\n                }\n\n                if (!useLibLoaded[contextName]) {\n                    loadLib();\n                    useLibLoaded[contextName] = true;\n                }\n\n                var req = requirejs({\n                    context: contextName\n                });\n\n                req(['build'], function () {\n                    callback(req);\n                });\n            }\n        };\n\n        requirejs.define = define;\n    }\n\n    //If in Node, and included via a require('requirejs'), just export and\n    //THROW IT ON THE GROUND!\n    if (env === 'node' && reqMain !== module) {\n        setBaseUrl(path.resolve(reqMain ? reqMain.filename : '.'));\n\n        createRjsApi();\n\n        module.exports = requirejs;\n        return;\n    } else if (env === 'browser') {\n        //Only option is to use the API.\n        setBaseUrl(location.href);\n        createRjsApi();\n        return;\n    } else if ((env === 'rhino' || env === 'xpconnect') &&\n            //User sets up requirejsAsLib variable to indicate it is loaded\n            //via load() to be used as a library.\n            typeof requirejsAsLib !== 'undefined' && requirejsAsLib) {\n        //This script is loaded via rhino's load() method, expose the\n        //API and get out.\n        setBaseUrl(fileName);\n        createRjsApi();\n        return;\n    }\n\n    if (commandOption === 'o') {\n        //Do the optimizer work.\n        loadLib();\n\n        //INSERT build/build.js\n\n    } else if (commandOption === 'v') {\n        console.log('r.js: ' + version +\n                    ', RequireJS: ' + this.requirejsVars.require.version +\n                    ', UglifyJS: 2.8.29');\n    } else if (commandOption === 'convert') {\n        loadLib();\n\n        this.requirejsVars.require(['env!env/args', 'commonJs', 'env!env/print'],\n            function (args, commonJs, print) {\n\n                var srcDir, outDir;\n                srcDir = args[0];\n                outDir = args[1];\n\n                if (!srcDir || !outDir) {\n                    print('Usage: path/to/commonjs/modules output/dir');\n                    return;\n                }\n\n                commonJs.convertDir(args[0], args[1]);\n            });\n    } else {\n        //Just run an app\n\n        //Load the bundled libraries for use in the app.\n        if (commandOption === 'lib') {\n            loadLib();\n        }\n\n        setBaseUrl(fileName);\n\n        if (exists(fileName)) {\n            exec(readFile(fileName), fileName);\n        } else {\n            showHelp();\n        }\n    }\n\n}((typeof console !== 'undefined' ? console : undefined),\n    (typeof Packages !== 'undefined' || (typeof window === 'undefined' &&\n        typeof Components !== 'undefined' && Components.interfaces) ?\n        Array.prototype.slice.call(arguments, 0) : []),\n    (typeof readFile !== 'undefined' ? readFile : undefined)));\n"]}