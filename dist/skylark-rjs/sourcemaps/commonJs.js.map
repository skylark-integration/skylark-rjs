{"version":3,"sources":["commonJs.js"],"names":["define","parse","commonJs","useLog","convertDir","commonJsPath","savePath","fs","i","fileName","convertedFileName","fileContents","jsFileRegExp","fileList","getFilteredFileList","replace","charAt","length","substring","test","readFile","convert","config","saveUtf8File","copyFile","console","log","preamble","commonJsProps","usesCommonJs","usesAmdOrRequireJs","dirname","filename","e"],"mappings":";;;;;;;AAGAA,OAAO,CACH,WACD,SACCC,GAEA,aACA,IAAIC,EAAW,CAGXC,OAAQ,CAAA,EAERC,WAAY,SAAUC,EAAcC,EAASC,GACzC,IAAcC,EAEVC,EAAUC,EAAmBC,EAD7BC,EAAe,QAInBC,EAAWN,EAAGO,oBAAoBT,EAAc,KAAM,CAAA,CAAI,EAa1D,GAVAA,EAAeA,EAAaU,QAAQ,MAAO,GAAG,EAC9CT,EAAWA,EAASS,QAAQ,MAAO,GAAG,EACe,MAAjDV,EAAaW,OAAOX,EAAaY,OAAS,CAAC,IAC3CZ,EAAeA,EAAaa,UAAU,EAAGb,EAAaY,OAAS,CAAC,GAEvB,MAAzCX,EAASU,OAAOV,EAASW,OAAS,CAAC,IACnCX,EAAWA,EAASY,UAAU,EAAGZ,EAASW,OAAS,CAAC,GAInDJ,GAAaA,EAASI,OAUvB,IAAKT,EAAI,EAAGA,EAAIK,EAASI,OAAQT,CAAC,GAE9BE,GADAD,EAAWI,EAASL,IACSO,QAAQV,EAAcC,CAAQ,EAGvDM,EAAaO,KAAKV,CAAQ,GAC1BE,EAAeJ,EAAGa,SAASX,CAAQ,EACnCE,EAAeT,EAASmB,QAAQZ,EAAUE,EAAaW,MAAM,EAC7Df,EAAGgB,aAAab,EAAmBC,CAAY,GAG/CJ,EAAGiB,SAASf,EAAUC,EAAmB,CAAA,CAAI,OApBjDR,EAASC,SACY,YAAjBE,EAEAoB,QAAQC,IAAI,OAASxB,EAASmB,QAAQf,EAAUC,EAAGa,SAASd,CAAQ,EAAEgB,MAAM,CAAC,EAE7EG,QAAQC,IAAI,qCAAuCrB,CAAY,EAmB/E,EAWAgB,QAAS,SAAUZ,EAAUE,GAEzB,IACI,IAAIgB,EAAW,GACXC,EAAgB3B,EAAM4B,aAAapB,EAAUE,CAAY,EAG7D,GAAIV,EAAM6B,mBAAmBrB,EAAUE,CAAY,GAAK,CAACiB,EACrD,OAAOjB,EASXA,EAAe,gDALXgB,EADAC,EAAcG,SAAWH,EAAcI,SAC5B,4GAMXL,GACAhB,EACA,SAKR,CAHE,MAAOsB,GACLR,QAAQC,IAAI,wCAA0CjB,EAAW,gCAAkCwB,CAAC,CAExG,CAEA,OAAOtB,CACX,CACJ,EAEA,OAAOT,CACX,CAAC","file":"../commonJs.js","sourcesContent":["/*jslint */\n/*global define: false, console: false */\n\ndefine([\n    './parse'\n], function (\n    parse\n) {\n    'use strict';\n    var commonJs = {\n        //Set to false if you do not want this file to log. Useful in environments\n        //like node where you want the work to happen without noise.\n        useLog: true,\n\n        convertDir: function (commonJsPath, savePath,fs) {\n            var fileList, i,\n                jsFileRegExp = /\\.js$/,\n                fileName, convertedFileName, fileContents;\n\n            //Get list of files to convert.\n            fileList = fs.getFilteredFileList(commonJsPath, /\\w/, true);\n\n            //Normalize on front slashes and make sure the paths do not end in a slash.\n            commonJsPath = commonJsPath.replace(/\\\\/g, \"/\");\n            savePath = savePath.replace(/\\\\/g, \"/\");\n            if (commonJsPath.charAt(commonJsPath.length - 1) === \"/\") {\n                commonJsPath = commonJsPath.substring(0, commonJsPath.length - 1);\n            }\n            if (savePath.charAt(savePath.length - 1) === \"/\") {\n                savePath = savePath.substring(0, savePath.length - 1);\n            }\n\n            //Cycle through all the JS files and convert them.\n            if (!fileList || !fileList.length) {\n                if (commonJs.useLog) {\n                    if (commonJsPath === \"convert\") {\n                        //A request just to convert one file.\n                        console.log('\\n\\n' + commonJs.convert(savePath, fs.readFile(savePath),config));\n                    } else {\n                        console.log(\"No files to convert in directory: \" + commonJsPath);\n                    }\n                }\n            } else {\n                for (i = 0; i < fileList.length; i++) {\n                    fileName = fileList[i];\n                    convertedFileName = fileName.replace(commonJsPath, savePath);\n\n                    //Handle JS files.\n                    if (jsFileRegExp.test(fileName)) {\n                        fileContents = fs.readFile(fileName);\n                        fileContents = commonJs.convert(fileName, fileContents,config);\n                        fs.saveUtf8File(convertedFileName, fileContents);\n                    } else {\n                        //Just copy the file over.\n                        fs.copyFile(fileName, convertedFileName, true);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Does the actual file conversion.\n         *\n         * @param {String} fileName the name of the file.\n         *\n         * @param {String} fileContents the contents of a file :)\n         *\n         * @returns {String} the converted contents\n         */\n        convert: function (fileName, fileContents) {\n            //Strip out comments.\n            try {\n                var preamble = '',\n                    commonJsProps = parse.usesCommonJs(fileName, fileContents);\n\n                //First see if the module is not already RequireJS-formatted.\n                if (parse.usesAmdOrRequireJs(fileName, fileContents) || !commonJsProps) {\n                    return fileContents;\n                }\n\n                if (commonJsProps.dirname || commonJsProps.filename) {\n                    preamble = 'var __filename = module.uri || \"\", ' +\n                               '__dirname = __filename.substring(0, __filename.lastIndexOf(\"/\") + 1); ';\n                }\n\n                //Construct the wrapper boilerplate.\n                fileContents = 'define(function (require, exports, module) {' +\n                    preamble +\n                    fileContents +\n                    '\\n});\\n';\n\n            } catch (e) {\n                console.log(\"commonJs.convert: COULD NOT CONVERT: \" + fileName + \", so skipping it. Error was: \" + e);\n                return fileContents;\n            }\n\n            return fileContents;\n        }\n    };\n\n    return commonJs;\n});\n"]}